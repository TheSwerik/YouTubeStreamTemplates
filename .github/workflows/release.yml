name: release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Push events to matching [0-9]+.[0-9]+.[0-9]+, i.e. 1.0.0, 187.753.5

env:
  PROJECT_NAME: YouTubeStreamTemplatesCrossPlatform
  FILENAME_WIN: YouTube StreamTemplates
  FILENAME_UNIX: YouTubeStreamTemplates
  ARTIFACT_WIN: windows-artifact
  ARTIFACT_UNIX: unix-artifact
  
#TODO Confuscate dll

jobs:
  build-unix:
    if: github.event.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Change Project Variables
        run: |
          sed -i 's+<DisableWinExeOutputInference>true</DisableWinExeOutputInference>+<DisableWinExeOutputInference>false</DisableWinExeOutputInference>+g' "${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"
          sed -i 's+<OutputType>Exe</OutputType>+<OutputType>WinExe</OutputType>+g' "${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

      - name: Change constants
        run: |
          sed -i 's+"CLIENT_ID"+"${{ env.CLIENT_ID }}"+g' "YouTubeStreamTemplates/src/LiveStreaming/LiveStreamService.cs"
          sed -i 's+"CLIENT_SECRET"+"${{ env.CLIENT_SECRET }}"+g' "YouTubeStreamTemplates/src/LiveStreaming/LiveStreamService.cs"

      - name: Publish Linux
        run: dotnet publish "-p:PublishProfile=${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -c:Release -o:Publish/linux  -v:m -r:linux-x64 --self-contained:true -p:PublishSingleFile=false -p:PublishTrimmed=true
      #TODO create/copy Makefile

      - name: Zip Linux
        run: |
          mkdir -p Installer
          tar -C Publish/linux --exclude=osx -czf "Installer/${{ env.FILENAME_UNIX }}.tar.gz" .

      - name: Publish MacOS
        run: dotnet publish "-p:PublishProfile=${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -c:Release -o:Publish/mac    -v:m -r:osx-x64 --self-contained:true -p:PublishSingleFile=false -p:PublishTrimmed=true

      - name: Zip MacOS
        run: |
          mkdir -p Installer
          7z a "Installer/${{ env.FILENAME_UNIX }}.zip" ./Publish/* -xr!linux 

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_UNIX }}
          path: |
            Installer/${{ env.FILENAME_UNIX }}.tar.gz
            Installer/${{ env.FILENAME_UNIX }}.zip

  build-windows:
    if: github.event.base_ref == 'refs/heads/main'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Change Project Variables
        run: |
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<OutputType>Exe</OutputType>', '<OutputType>WinExe</OutputType>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<DisableWinExeOutputInference>true</DisableWinExeOutputInference>', '<DisableWinExeOutputInference>false</DisableWinExeOutputInference>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"
          (gc "Inno Config.iss") -replace '"0.0.0"', '"${{ steps.get_version.outputs.VERSION }}"' | Out-File -encoding ASCII "Inno Config.iss"

      - name: Change constants
        run: |
          (gc "YouTubeStreamTemplates\src\LiveStreaming\LiveStreamService.cs") -replace '"CLIENT_ID"', '"${{ env.CLIENT_ID }}"' | Out-File -encoding ASCII "YouTubeStreamTemplates\src\LiveStreaming\LiveStreamService.cs"
          (gc "YouTubeStreamTemplates\src\LiveStreaming\LiveStreamService.cs") -replace '"CLIENT_SECRET"', '"${{ env.CLIENT_SECRET }}"' | Out-File -encoding ASCII "YouTubeStreamTemplates\src\LiveStreaming\LiveStreamService.cs"

      - name: Publish 64bit
        run: dotnet publish "-p:PublishProfile=${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj" -c:Release -o:Publish\bin\64bit -v:m -r:win-x64 --self-contained:true -p:PublishSingleFile=false -p:PublishTrimmed=true

      - name: Publish 32bit
        run: dotnet publish "-p:PublishProfile=${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj" -c:Release -o:Publish\bin\32bit -v:m -r:win-x86 --self-contained:true -p:PublishSingleFile=false -p:PublishTrimmed=true
        
      - name: Get Certificate
        run: |
          $bytes = [Convert]::FromBase64String(${{ env.BASE64_ENCODED_PFX }})
          [IO.File]::WriteAllBytes('Installer/developer-certificate.pfx', $bytes)

      - name: Create Installer
        run: iscc "/ssigntool=$qC:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe$q sign /f Installer/developer-certificate.pfx /t http://timestamp.comodoca.com/authenticode /p ${{ env.PFX_KEY }} /fd sha256 $f" /qp "Inno Config.iss"

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_WIN }}
          path: Installer/${{ env.FILENAME_WIN }}.exe

  create-release:
    needs: [ build-unix, build-windows ]
    if: github.event.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: Installer

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
              
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          prerelease: ${{ startsWith(steps.get_version.outputs.VERSION, '0.') }}
          draft: false
          files: |
            Installer/${{ env.ARTIFACT_WIN }}/${{ env.FILENAME_WIN }}.exe
            Installer/${{ env.ARTIFACT_UNIX }}/${{ env.FILENAME_UNIX }}.zip
            Installer/${{ env.ARTIFACT_UNIX }}/${{ env.FILENAME_UNIX }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
